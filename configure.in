AC_PREREQ(2.59)
AC_INIT([Globulation 2], 0.8.23, [glob2-devel@nongnu.org], glob2)
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(glob2, 0.8.23)

AC_CONFIG_SRCDIR([src/Game.cpp])
AM_CONFIG_HEADER(config.h)

CXXFLAGS="$CXXFLAGS -Wall"

dnl Programs 
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl Set to C for all libraries test
AC_LANG(C)

dnl Header files
AC_STDC_HEADERS
AC_FUNC_ALLOCA
AC_HEADER_DIRENT
AC_HAVE_HEADERS(string.h sys/time.h assert.h)

dnl static release
static=no
AC_ARG_ENABLE(static, [  --enable-static         Enable building of (mostly) static binary, default is no],static=yes,)
AM_CONDITIONAL(LINKSTATIC, test x$static = xyes)

dnl Libraries

dnl Check for zlib
AC_CHECK_HEADER(zlib.h,)
AC_CHECK_LIB(z,gzdopen,,AC_MSG_ERROR([*** zlib library not found. Please install zlib (http://www.gzip.org/zlib).]))

dnl Check for Speex
AC_CHECK_HEADER(speex/speex.h,,AC_MSG_ERROR([*** Speex headers not found. Please install Speex (http://www.speex.org).]))
AC_CHECK_LIB(speex,speex_encoder_init,,AC_MSG_ERROR([*** Speex library not found. Please install Speex (http://www.speex.org).]))

dnl Check for SDL
SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION, :, AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!]))

dnl Check for SDL_image and SDL_net
CPPFLAGS="$CPPFLAGS $SDL_CFLAGS"
AC_CHECK_HEADER(SDL_image.h,,AC_MSG_ERROR([*** SDL_image headers not found !]))
AC_CHECK_HEADER(SDL_net.h,,AC_MSG_ERROR([*** SDL_net headers not found !]))
AC_CHECK_HEADER(SDL_ttf.h,,AC_MSG_ERROR([*** SDL_ttf headers not found !]))
AC_CHECK_LIB(SDL_image, IMG_Load_RW, SDL_LIBS="$SDL_LIBS -lSDL_image", AC_MSG_ERROR([*** SDL_image library not found !]), $SDL_LIBS)
AC_CHECK_LIB(SDL_net, SDLNet_UDP_Open, SDL_LIBS="$SDL_LIBS -lSDL_net", AC_MSG_ERROR([*** SDL_net library not found !]), $SDL_LIBS)
AC_CHECK_LIB(SDL_ttf, TTF_Init, SDL_LIBS="$SDL_LIBS -lSDL_ttf", AC_MSG_ERROR([*** SDL_ttf library not found !]), $SDL_LIBS)

dnl Check for libvorbis
XIPH_PATH_VORBIS


dnl Open GL support
have_opengl=yes
AC_ARG_ENABLE(opengl, [  --disable-opengl        Disable the OpenGL renderer even if available (default is enabled)],have_opengl=no,)
# AC_ARG_ENABLE(lua, [  --disable-lua        Disable Lua Bindings to system internals (default is enabled)], have_lua=no,)


# test for GL/, normal

if test "$have_opengl" != "no"; then # if --disable-opengl was given don't test any gl stuff

if test "$have_opengl" = "yes"; then
	AC_CHECK_HEADER(GL/gl.h,,have_opengl=no)
	AC_CHECK_HEADER(GL/glu.h,,have_opengl=no)
	AC_CHECK_LIB(GL, glBegin,,have_opengl=no,-lpthread)
	AC_CHECK_LIB(GLU, gluOrtho2D,,have_opengl=no,-lpthread)
fi
# test for OpenGL/, Mac OS X
if test "$have_opengl" = "no"; then
	have_opengl=yes
	AC_CHECK_HEADER(OpenGL/gl.h,,have_opengl=no)
	AC_CHECK_HEADER(OpenGL/glu.h,,have_opengl=no)
	saved_libs="$LIBS"
	LIBS="-framework OpenGL $LIBS"
	AC_TRY_LINK([#include <OpenGL/gl.h>
			#include <OpenGL/glu.h>],
			[glBegin(GL_POINTS); gluOrtho2D(0, 0, 0, 0);],
			[AC_MSG_NOTICE([Found OpenGL framework on OS X])],
			[LIBS="$saved_libs"
			have_opengl=no])
	if test "$have_opengl" = "yes"; then
		AC_DEFINE([OPENGL_HEADER_DIRECTORY_OPENGL],,[OpenGL headers are in OpenGL/ if HAVE_OPENGL is defined])
	fi
fi
# test for OpenGL/, Win32
if test "$have_opengl" = "no"; then
	have_opengl=yes
	AC_CHECK_HEADER(GL/gl.h,,have_opengl=no)
	AC_CHECK_HEADER(GL/glu.h,,have_opengl=no)
	AC_CHECK_LIB(opengl32, main,,have_opengl=no)
	AC_CHECK_LIB(glu32, main,,have_opengl=no)
fi

if test "$have_opengl" = "yes"; then
	AC_DEFINE([HAVE_OPENGL],[],[Defined when OpenGL support is present and compiled])
else
	AC_MSG_WARN([OpenGL not found or not working. OpenGL support will be disabled.])
fi

fi # from --disable-opengl


dnl fribidi support
have_fribidi=yes
AC_ARG_ENABLE(fribidi, [  --disable-fribidi       Disable the fribidi font renderer even if available (default is enabled)],have_fribidi=no,)
if test "$have_fribidi" = "yes"; then
	AC_CHECK_HEADER(fribidi/fribidi.h,,have_fribidi=no)
	AC_CHECK_LIB(fribidi,fribidi_log2vis,,have_fribidi=no)
fi
if test "$have_fribidi" = "yes"; then
	AC_DEFINE([HAVE_FRIBIDI],[],[Defined when FRIBIDI support is present and compiled])
fi


AC_MSG_CHECKING(for Mingw32)
case $host in
	*-*-mingw*)	MING=yes
			LIBS="$LIBS -logg -lwsock32"
			;;
	*)		MING=no
			LIBS="$LIBS"	
			;;
esac

AM_CONDITIONAL(MINGW, test x$MING = xyes)
AC_MSG_RESULT($MING)

dnl Type of voice recorder
AC_DEFINE([AUDIO_RECORDER_OSS],,[Set the audio input type to OSS; the UNIX Open Sound System])

dnl Set the C++ after the tests
AC_LANG(C++)

AC_CHECK_HEADERS(vector,,AC_MSG_ERROR([*** STL classes missing]))
AC_CHECK_HEADER(boost/tuple/tuple.hpp,,AC_MSG_ERROR([*** boost tuple headers not found]))
AC_CHECK_HEADER(boost/logic/tribool.hpp,,AC_MSG_ERROR([*** boost tribool headers not found]))
AC_CHECK_HEADER(boost/shared_ptr.hpp,,AC_MSG_ERROR([*** boost shared_ptr headers not found]))
AC_CHECK_HEADER(boost/thread/thread.hpp,,AC_MSG_ERROR([*** boost thread headers not found]))


dnl Packaging
dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [data directory])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [data directory])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", [data directory])
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [source directory])

AC_CONFIG_FILES([Makefile
	autopackage/default.apspec
	autopackage/Makefile
	src/Makefile
	doc/Makefile
	data/Makefile
	data/gfx/Makefile
	data/gfx/cursor/Makefile
	data/fonts/Makefile
	data/gui/Makefile
	data/zik/Makefile
	data/icons/Makefile
	maps/Makefile
	campaigns/Makefile
	libgag/Makefile
	libgag/include/Makefile
	libgag/src/Makefile
	gnupg/Makefile])
AC_OUTPUT

